#include <catch.hpp>

#include <stdexcept>
#include <vector>

#include <libkameris/distances.hpp>
#include <libkameris/utils/matrix_vector_adapters.hpp>

#include "../test_helpers.hpp"

using namespace std;
using namespace kameris;

const vector<double> vect1 = {4.683466861851057, 5.686983973114705, 8.438974067654303, 2.066034805708277, 1, 0, 0};
const vector<double> vect2 = {2.791099277582326, 1.658589795039715, 9.050008948479139, 3.5626466924860285, 0, 0, 1};
const auto vect1_adapt = make_vector_adapter(const_cast<double *>(vect1.data()), vect1.size()); // NOLINT
const auto vect2_adapt = make_vector_adapter(const_cast<double *>(vect2.data()), vect2.size()); // NOLINT

vector<double> vect1_copy = vect1;
vector<double> vect1_copy_2 = vect1;
auto vect1_copy_adapt = make_vector_adapter(vect1_copy_2.data(), vect1_copy_2.size());

const vector<double> zero_vect = {0, 0, 0, 0};
const auto zero_vect_adapt = make_vector_adapter(const_cast<double *>(zero_vect.data()), zero_vect.size()); // NOLINT
const auto zero_matr = make_matrix_adapter(const_cast<double *>(zero_vect.data()), 2, 2); // NOLINT

const vector<double> empty_vect;
const auto empty_vect_adapt = make_vector_adapter(const_cast<double *>(empty_vect.data()), empty_vect.size()); // NOLINT

const double flat_matr1[225] = {7.7904610576024, 6.786066778651417, 9.641705907683718, 6.521396971819716,
	1.8995278293330315, 4.507352556147783, 1.9223748451053204, 2.7953283570960465, 9.117435101544771,
	2.5151498198459183, 1.7075311539537896, 5.867166400733634, 5.256545733693489, 4.772433750253191, 3.4267835396913355,
	9.84266511269296, 1.838550175921858, 7.717718444789277, 0.21154270128649166, 8.025503264427499, 7.307234098728859,
	9.127779172162825, 1.8010900955404185, 3.295010795872521, 4.11243314056615, 4.002049011090561, 5.489785268997609,
	2.000175736475022, 4.262934848877551, 8.725717702342958, 9.61786257419455, 3.5101080332759977, 2.954524819664808,
	7.606729497012459, 9.431394494490515, 2.80753021100524, 4.018297218297736, 2.7733590167444326, 1.6095552877975443,
	4.696854802052409, 1.5179749992663716, 0.7510761696567076, 0.11521935361164282, 4.760256503813583,
	9.201705670802841, 0.8273766725482528, 1.3060107206909528, 6.050857983780212, 6.6068781444479185,
	1.0133097628705894, 7.836872593985522, 5.74252612770168, 3.8507257654435563, 0.4717237765146578, 6.188242878042711,
	6.398465529139944, 0.25097678940283963, 4.62663107699823, 0.3296932501697185, 0.18520880690349273,
	6.767301193977822, 5.578896132342358, 5.7157935537659, 8.705392741353833, 4.065784683649333, 5.999491319254409,
	6.343537161923024, 9.906688453043436, 0.41866476296454636, 8.781628802501345, 1.583655122142261, 2.9639760856241164,
	5.1288077125288645, 6.802190580916104, 6.4602122671701245, 8.24140104213712, 8.544724240833478, 3.523449086889963,
	0.698742723687964, 3.39917815584613, 6.523108296259899, 2.25432145424441, 8.455449493343178, 0.8364572483635335,
	5.677519692075867, 8.469834866778314, 0.07204727423390267, 8.436778183513653, 7.615289911864643, 1.7760438130415839,
	3.8911071804908897, 1.6540224947005928, 3.5100474512931896, 2.932200885263059, 6.138018252974732,
	3.1597488687900785, 8.650759670714955, 8.617996038766414, 1.1525885501597344, 0.9949086403447254,
	0.056446982408340673, 4.312376520792306, 3.2484714345429495, 8.230844893013874, 9.562813800139306,
	2.273687120641732, 8.450572586181337, 6.416439379870845, 3.264814442048209, 3.879806743359996, 1.4197099226869305,
	0.021351911642831567, 5.198492858416177, 0.3092896726200287, 3.158965795716149, 9.848962215773103,
	3.5507627682622918, 0.22966484143990584, 8.345563509445487, 5.736591196667678, 1.3440440729378516,
	4.274188519508936, 4.900706712899552, 9.103352937677009, 3.2937593544287402, 4.067005397712309, 3.9937475105431375,
	5.045004097180289, 5.9342337788974735, 2.885972110285257, 7.701714082463813, 0.1038339055212667, 6.242257591188121,
	8.40345733186296, 4.277808042694424, 3.9189744649261637, 3.4990619982368347, 5.582167463908158, 5.655179672319083,
	1.4897339436825945, 4.353409879437258, 3.1108922270510284, 6.126666454340381, 6.674722559374878, 1.8305532938975908,
	6.785181463211423, 2.1594504975229754, 8.418068187736921, 9.426780777171622, 9.231546242033044, 9.070601242412174,
	9.367202332873955, 7.550098571266023, 3.0293696334426663, 7.560442094476372, 6.594031580095411, 3.453455038930354,
	5.029185404755809, 9.154345598564383, 8.45883654597662, 3.17866328378242, 8.768022748404757, 3.497377380399058,
	3.9261123730866885, 0.2620127350866639, 7.481322835708827, 2.808937071187419, 6.797920330164942, 0.3348161014849733,
	8.660075442858208, 7.082465723880524, 8.699928046376677, 7.408222287527757, 9.315945106129252, 5.129045498057241,
	5.287561658454001, 7.510339465394914, 6.148610391820345, 0.8519561185471876, 7.529604783187619, 6.481983091775387,
	7.637350287287433, 3.5665597823424893, 8.292065421533223, 3.626936728334517, 7.566508963412424, 2.7920983115797497,
	5.200860085413279, 0.3630302959260163, 1.2139750976578423, 8.086501550037326, 5.614001979649764, 8.302979637853067,
	0.5848529269582308, 6.566482815134723, 3.1811748252367202, 7.496789987892111, 5.99128045916007, 1.7210352531016362,
	4.1333748804985575, 1.216507726145677, 5.698725769090885, 5.036463311258885, 3.677773470455312, 0.2710591387439898,
	2.3783935622914996, 2.7839098857085673, 0.7036430714405721, 6.1801799251298455, 1.0911400153628819,
	5.769185710326525, 6.114532531913042, 4.209452870514083, 4.214798374873714, 2.511772007034285, 1.6076525389081695,
	1.180246953801209, 9.52394679250251, 1.6555949288555638, 8.347550986167441, 6.975444755896429, 6.5553898888474045,
	1.851249918643541, 6.485405840307056, 3.6052029362247495};
const double flat_matr2[225] = {3.6063888271335625, 9.339954878324988, 2.469338778502575, 7.417633046811993,
	3.5618319238904323, 7.674259276771931, 6.8160771398163575, 3.8014328271507036, 2.5237833371165586,
	0.9087148228926996, 2.7534826272446296, 9.539224096532216, 0.25750754977164014, 5.840327078974166,
	3.4516369161628173, 5.068981216350878, 2.17468898673234, 4.934082086394838, 8.027157284531164, 4.471617827070432,
	9.055877384612877, 3.2751293591391324, 5.328238556768438, 6.164437293869977, 8.898917123304106, 7.712418362504504,
	5.2725608117977885, 9.286431455447055, 6.675948042467233, 6.638484129698156, 8.358599959480447, 7.622860028061297,
	7.875008811179541, 1.0375852977373334, 9.28708757995107, 4.3513475832614645, 0.023991439082198696,
	7.065578731638656, 7.094609604871099, 2.012737633308223, 5.9746540227318405, 2.283810504683455, 7.5821263726523895,
	7.89488515980306, 9.243875778598056, 7.444475926219159, 0.4187128974060865, 9.861771276674073, 6.280705838549142,
	1.6412802718960613, 4.8267977344639945, 2.5167510099339054, 5.651139315387827, 9.903507942928051, 5.14594683733714,
	0.6925158497484176, 3.227793806790551, 1.8078474974893695, 0.5151872842355854, 5.629603336892927,
	0.30569884489421995, 7.521860817487042, 8.122367252340737, 7.237626376625027, 7.950506654036062, 1.2455261689783015,
	8.559443876839918, 2.2170945018439916, 8.677490192539345, 7.967784556912566, 0.4405605490117619, 4.648678711600285,
	4.351080660108471, 4.400352457743455, 6.371680730474591, 8.688479297050591, 6.3534014435652715, 0.6120730669413987,
	4.325546959397839, 1.4082507943027078, 3.6842980368030744, 6.757922595023494, 0.02506684695574357,
	4.8542968902967445, 9.306761524843601, 7.756931462366406, 2.932668846264203, 4.587025517457782, 0.7002028485574883,
	7.746127562422643, 0.9259972832337731, 9.820523301290681, 4.17131877485444, 1.6614099254613492, 9.82966625085605,
	6.391643029668035, 1.2394323648434469, 6.148448477505006, 5.220154272412081, 6.6495501826267365, 2.865828668979315,
	1.3931535637605457, 7.868368690404832, 9.204437285944703, 2.8088635863562654, 9.420136057366719, 9.929707366728003,
	5.508819901483919, 1.1382256051441804, 6.820406572503149, 4.580411172542407, 2.8022079763303864, 4.251582557971279,
	9.149852125692512, 1.3918552908714599, 6.005547858156881, 6.103954383813594, 2.2172033678418117, 8.013703044187263,
	7.697758205305814, 7.104724343995713, 0.7318912880333421, 0.054852704063829805, 4.30910966309211,
	3.8870808446532497, 6.895235896349007, 0.008276631642111454, 9.662619958911208, 7.5879600529519955,
	7.2772280217763665, 4.031791840063137, 6.701092910786684, 5.969745900322355, 9.928383670728739, 8.12315652485061,
	1.6969204752004163, 6.9377652246575, 4.251607296362611, 5.777346323379504, 3.0200275465048243, 1.7183265748613525,
	4.1059257141532886, 3.94967736433032, 1.529915373832262, 6.155902333223608, 4.82235751608442, 8.208070377580157,
	2.4769015947019124, 7.601685346802732, 4.933246753802383, 4.032364920222481, 7.508126571162215, 4.5522146093580425,
	0.8831507928332645, 0.011597922096086677, 9.284985926736006, 4.045132166724038, 2.2805940561682387,
	1.1795584024701746, 5.750005695529898, 9.136087583171136, 4.08377728621325, 0.24239968681542656,
	0.08096301415178964, 9.629662576339356, 7.86432775049898, 0.09992757988749368, 3.193623103448168, 9.632889553651601,
	9.482095721570268, 4.7734920483219145, 9.423580592996444, 6.540836419425961, 3.629616332536319, 8.123034154917214,
	7.485589781239387, 5.147975650296674, 4.435846362643755, 4.765243317596404, 1.367219561251991, 7.189655276239392,
	8.703004638769936, 2.2131893007426218, 7.141471515629711, 0.831755610309223, 2.8268791180775548, 8.434629310934035,
	2.1244807006528372, 4.868737612273353, 8.175193400660138, 8.766684091748424, 5.330320545781671, 6.617867504983554,
	9.511906708056273, 8.86791973664193, 5.754800989972255, 7.671715302156979, 0.2931695192611947, 2.717123239513173,
	4.311118831719046, 9.664386221952611, 5.534802772384051, 8.782139344336496, 6.862854148879162, 8.03995267434654,
	8.234648154476435, 2.0891223869548767, 0.34356575051464056, 1.0504667489091943, 0.23804840119061765,
	6.072203028558533, 0.9706100983622079, 1.4916283579666967, 6.891115860955409, 1.2701612141385628,
	2.9090324706263857, 3.8541374553150014, 7.005409787361991, 6.080683470101455, 2.4614204036045493, 4.038047990048032,
	3.7503571259821715, 2.466857078180972, 2.065697961043531, 7.15776725876691};
const auto matr1 = make_matrix_adapter(const_cast<double *>(flat_matr1), 15, 15); // NOLINT
const auto matr2 = make_matrix_adapter(const_cast<double *>(flat_matr2), 15, 15); // NOLINT

#define RANDOM_VECTOR_TESTS(vect1, vect2, vect1_copy)                                                              \
	TEST_CLOSE_TO_DOUBLE(Euclidean distance, euclidean(vect1, vect2), 4.941884811806992);                          \
	TEST_CLOSE_TO_DOUBLE(squared Euclidean distance, squared_euclidean<double>(vect1, vect2), 24.422225493168632); \
	TEST_CLOSE_TO_DOUBLE(Manhattan distance, manhattan<double>(vect1, vect2), 10.028408529946308);                 \
	TEST_CLOSE_TO_DOUBLE(chi squared distance, chi_squared(vect1, vect2), 5.1075979037503298);                     \
	TEST_CLOSE_TO_DOUBLE(cosine distance, cosine(vect1, vect2), 0.0982065602458535);                               \
	TEST_CLOSE_TO_DOUBLE(Pearson distance, pearson(vect1, vect2), 0.18303759780473283);                            \
	TEST_CLOSE_TO_DOUBLE(approximate information distance, approx_info_dist(vect1, vect2), 0.3333333333333333);    \
	TEST_CLOSE_TO_DOUBLE(sum, sum(vect1), 21.875459708328342);                                                     \
	TEST_CLOSE_TO_DOUBLE(mean, mean(vect1), 3.1250656726183346);                                                   \
	TEST_CLOSE_TO_DOUBLE(dot product, dot_product<double>(vect1, vect2), 106.23773745242816);                      \
	TEST_CLOSE_TO_DOUBLE(add to, (add_to(vect1_copy, vect2), sum(vect1_copy)), 39.937804421915553);

#define ZERO_VECTOR_TESTS(vect1, vect2)                                                           \
	TEST_CLOSE_TO_DOUBLE(Euclidean distance, euclidean(vect1, vect2), 0);                         \
	TEST_CLOSE_TO_DOUBLE(squared Euclidean distance, squared_euclidean<double>(vect1, vect2), 0); \
	TEST_CLOSE_TO_DOUBLE(Manhattan distance, manhattan<double>(vect1, vect2), 0);                 \
	TEST_CLOSE_TO_DOUBLE(chi squared distance, chi_squared(vect1, vect2), 0);                     \
	TEST_CLOSE_TO_DOUBLE(cosine distance, cosine(vect1, vect2), 0);                               \
	TEST_CLOSE_TO_DOUBLE(Pearson distance, pearson(vect1, vect2), 0);                             \
	TEST_CLOSE_TO_DOUBLE(approximate information distance, approx_info_dist(vect1, vect2), 0);    \
	TEST_CLOSE_TO_DOUBLE(sum, sum(vect1), 0);                                                     \
	TEST_CLOSE_TO_DOUBLE(mean, mean(vect1), 0);                                                   \
	TEST_CLOSE_TO_DOUBLE(dot product, dot_product<double>(vect1, vect2), 0);

#define VECTOR_LENGTH_TESTS(vect1, vect2, vect1_copy)                                                   \
	TEST_THROWS(Euclidean distance, euclidean(vect1, vect2), invalid_argument);                         \
	TEST_THROWS(squared Euclidean distance, squared_euclidean<double>(vect1, vect2), invalid_argument); \
	TEST_THROWS(Manhattan distance, manhattan<double>(vect1, vect2), invalid_argument);                 \
	TEST_THROWS(chi squared distance, chi_squared(vect1, vect2), invalid_argument);                     \
	TEST_THROWS(cosine distance, cosine(vect1, vect2), invalid_argument);                               \
	TEST_THROWS(Pearson distance, pearson(vect1, vect2), invalid_argument);                             \
	TEST_THROWS(approximate information distance, approx_info_dist(vect1, vect2), invalid_argument);    \
	TEST_THROWS(dot product, dot_product<double>(vect1, vect2), invalid_argument);                      \
	TEST_THROWS(add to, (add_to(vect1_copy, vect2), sum(vect1_copy)), invalid_argument);

SCENARIO("libkameris dense distances (normal)", "[libkameris][distances]") {
	GIVEN("Two random vectors") {
		WHEN("using as std::vectors") {
			RANDOM_VECTOR_TESTS(vect1, vect2, vect1_copy);
		}

		WHEN("using as kameris::VectorAdapters") {
			RANDOM_VECTOR_TESTS(vect1_adapt, vect2_adapt, vect1_copy_adapt);
		}
	}

	GIVEN("Two random matrices") {
		WHEN("using as kameris::MatrixAdapters") {
			TEST_CLOSE_TO_DOUBLE(SSIM distance, ssim(matr1, matr2), -0.11726793174751227);
		}
	}

	GIVEN("Two zero vectors") {
		WHEN("using as std::vectors") {
			ZERO_VECTOR_TESTS(zero_vect, zero_vect);
		}

		WHEN("using as kameris::VectorAdapters") {
			ZERO_VECTOR_TESTS(zero_vect_adapt, zero_vect_adapt);
		}
	}
}

SCENARIO("libkameris dense distances (exceptions)", "[libkameris][distances]") {
	GIVEN("Two vectors of different size") {
		WHEN("using as std::vectors") {
			VECTOR_LENGTH_TESTS(vect1, zero_vect, vect1_copy);
		}

		WHEN("using as kameris::VectorAdapters") {
			VECTOR_LENGTH_TESTS(vect1_adapt, zero_vect_adapt, vect1_copy_adapt);
		}
	}

	GIVEN("Two matrices of different size") {
		WHEN("using as kameris::MatrixAdapters") {
			TEST_THROWS(SSIM distance, ssim(matr1, zero_matr), invalid_argument);
		}
	}

	GIVEN("Two matrices smaller than 11x11") {
		WHEN("using as kameris::MatrixAdapters") {
			TEST_THROWS(SSIM distance, ssim(zero_matr, zero_matr), invalid_argument);
		}
	}

	GIVEN("An empty vector") {
		WHEN("using as an std::vector") {
			TEST_THROWS(mean, mean(empty_vect), invalid_argument);
		}

		WHEN("using as an kameris::VectorAdapter") {
			TEST_THROWS(mean, mean(empty_vect_adapt), invalid_argument);
		}
	}
}
